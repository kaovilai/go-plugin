// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcmux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KnockerClient is the client API for Knocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnockerClient interface {
	Knock(ctx context.Context, in *KnockRequest, opts ...grpc.CallOption) (*KnockResponse, error)
}

type knockerClient struct {
	cc grpc.ClientConnInterface
}

func NewKnockerClient(cc grpc.ClientConnInterface) KnockerClient {
	return &knockerClient{cc}
}

func (c *knockerClient) Knock(ctx context.Context, in *KnockRequest, opts ...grpc.CallOption) (*KnockResponse, error) {
	out := new(KnockResponse)
	err := c.cc.Invoke(ctx, "/grpcmux.Knocker/Knock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnockerServer is the server API for Knocker service.
// All implementations must embed UnimplementedKnockerServer
// for forward compatibility
type KnockerServer interface {
	Knock(context.Context, *KnockRequest) (*KnockResponse, error)
	mustEmbedUnimplementedKnockerServer()
}

// UnimplementedKnockerServer must be embedded to have forward compatible implementations.
type UnimplementedKnockerServer struct {
}

func (UnimplementedKnockerServer) Knock(context.Context, *KnockRequest) (*KnockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Knock not implemented")
}
func (UnimplementedKnockerServer) mustEmbedUnimplementedKnockerServer() {}

// UnsafeKnockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnockerServer will
// result in compilation errors.
type UnsafeKnockerServer interface {
	mustEmbedUnimplementedKnockerServer()
}

func RegisterKnockerServer(s grpc.ServiceRegistrar, srv KnockerServer) {
	s.RegisterService(&Knocker_ServiceDesc, srv)
}

func _Knocker_Knock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnockerServer).Knock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcmux.Knocker/Knock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnockerServer).Knock(ctx, req.(*KnockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Knocker_ServiceDesc is the grpc.ServiceDesc for Knocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Knocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcmux.Knocker",
	HandlerType: (*KnockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Knock",
			Handler:    _Knocker_Knock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knocker.proto",
}
